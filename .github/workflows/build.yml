name: "Build & Draft Release"

on:
  workflow_dispatch:

env:
  INTG_NAME: xbox
  PYTHON_VER: 3.11.12-0.3.0

jobs:
  build:
    name: Build Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.get-version-and-id.outputs.VERSION }}
      driver_id: ${{ steps.get-version-and-id.outputs.DRIVER_ID }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 200

      - name: Get version and id
        id: get-version-and-id
        run: |
          echo "VERSION=$(jq .version -r driver.json)" >> $GITHUB_OUTPUT
          echo "DRIVER_ID=$(jq .driver_id -r driver.json)" >> $GITHUB_OUTPUT

      - name: Build with PyInstaller
        run: |
          docker run --rm --name builder \
            --user=$(id -u):$(id -g) \
            -v ${GITHUB_WORKSPACE}:/workspace \
            docker.io/unfoldedcircle/r2-pyinstaller:${PYTHON_VER} \
            bash -c \
            "cd /workspace && \
             python -m pip install -r requirements.txt && \
             pyinstaller --clean --onedir --name ${{ steps.get_version.outputs.DRIVER_ID }} \
             --collect-all ucapi \
             --collect-all xbox.webapi \
             --collect-all xbox.sg \
             --collect-all httpx \
             --collect-all pydantic \
             --collect-all certifi \
             --collect-all zeroconf \
             uc_intg_xbox/driver.py"

      - name: Prepare and Package Artifacts
        shell: bash
        run: |
          ARTIFACT_NAME=${{ steps.get_version.outputs.DRIVER_ID }}-${{ steps.get_version.outputs.VERSION }}-aarch64
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT

          # Create the correct structure
          mkdir -p package/bin
          cp driver.json package/
          # Move the entire pyinstaller output directory into bin/_internal
          mv dist/${{ steps.get_version.outputs.DRIVER_ID }} package/bin/_internal
          
          # Create the driver script to launch the pyinstaller executable
          echo '#!/bin/sh' > package/bin/${{ steps.get_version.outputs.DRIVER_ID }}
          echo 'DIR=$(dirname "$0")' >> package/bin/${{ steps.get_version.outputs.DRIVER_ID }}
          echo '$DIR/_internal/${{ steps.get_version.outputs.DRIVER_ID }} "$@"' >> package/bin/${{ steps.get_version.outputs.DRIVER_ID }}
          chmod +x package/bin/${{ steps.get_version.outputs.DRIVER_ID }}
          
          # Create the final tar.gz from the correctly structured package
          tar czvf ${ARTIFACT_NAME}.tar.gz -C package .
          
      - uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.prepare_package.outputs.ARTIFACT_NAME }}
          path: ${{ steps.prepare_package.outputs.ARTIFACT_NAME }}.tar.gz

  release:
    # ... The release job remains the same ...
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build]
    permissions:
      contents: write
    steps:
      - name: Download build artifacts
        uses: actions/download-artifact@v4
      - name: Extract build archives
        run: find . -type f -name '*.tar.gz' -exec mv {} . \;
      - name: Create hash file
        run: sha256sum *.tar.gz | awk '{print $1}' > ${{needs.build.outputs.driver_id}}.hash
      - name: Create release draft
        uses: ncipollo/release-action@v1
        with:
          artifacts: "*.tar.gz,*.hash"
          draft: true
          generateReleaseNotes: true
          tag: v${{needs.build.outputs.version}}