name: "Build & Draft Release"

on:
  workflow_dispatch:

env:
  INTG_NAME: xbox
  PYTHON_VER: 3.11.12-0.3.0

jobs:
  build_and_release:
    name: Build and Draft Release
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 200

      - name: Get version and id from driver.json
        id: get_version
        run: |
          echo "VERSION=$(jq .version -r driver.json)" >> $GITHUB_OUTPUT
          echo "DRIVER_ID=$(jq .driver_id -r driver.json)" >> $GITHUB_OUTPUT

      - name: Build integration binary
        run: |
          sudo apt-get update && sudo apt-get install -y qemu-system binfmt-support qemu-user-static
          docker run --rm --privileged multiarch/qemu-user-static --reset -p yes
          docker run --rm --name builder \
            --platform=aarch64 \
            --user=$(id -u):$(id -g) \
            -v ${GITHUB_WORKSPACE}:/workspace \
            docker.io/unfoldedcircle/r2-pyinstaller:${{ env.PYTHON_VER }} \
            bash -c \
            "cd /workspace && \
             python -m pip install -r requirements.txt && \
             pyinstaller --clean --onedir --name intg-${{ steps.get_version.outputs.DRIVER_ID }} --collect-all zeroconf --collect-all httpx --collect-all pydantic uc_intg_xbox/driver.py"

      - name: Prepare package for release
        id: prepare_package
        run: |
          ARTIFACT_NAME=${{ steps.get_version.outputs.DRIVER_ID }}-${{ steps.get_version.outputs.VERSION }}-aarch64
          echo "ARTIFACT_NAME=${ARTIFACT_NAME}" >> $GITHUB_OUTPUT
          
          mkdir -p release_assets/bin
          mv dist/intg-${{ steps.get_version.outputs.DRIVER_ID }}/* release_assets/bin
          mv release_assets/bin/intg-${{ steps.get_version.outputs.DRIVER_ID }} release_assets/bin/driver
          cp driver.json release_assets/
          
          tar -czvf ${ARTIFACT_NAME}.tar.gz -C release_assets .
          sha256sum ${ARTIFACT_NAME}.tar.gz | awk '{print $1}' > ${{ steps.get_version.outputs.DRIVER_ID }}.hash

      - name: Create release draft
        uses: ncipollo/release-action@v1
        with:
          artifacts: "${{ steps.prepare_package.outputs.ARTIFACT_NAME }}.tar.gz,${{ steps.get_version.outputs.DRIVER_ID }}.hash"
          draft: true
          generateReleaseNotes: true
          tag: v${{ steps.get_version.outputs.VERSION }}